# -*- coding: utf-8 -*-
"""Movie-Recom

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gXPlFyDXKoX1zr_8_ld4oZRgNX0eTNAN
"""

import pandas as pd
import numpy as np
import ast

movies=pd.read_csv('/content/tmdb_5000_movies.csv')
credits=pd.read_csv('/content/tmdb_5000_credits.csv')

movies.head(1)

credits.head(1)

movies=movies.merge(credits,on='title')

movies.head(1)

movies=movies[['movie_id','title','overview','genres','keywords','cast','crew']]

movies.isnull().sum()

movies.dropna(inplace=True)

movies.duplicated().sum()

movies.iloc[0].genres

def convert(obj):
  l=[]
  for i in ast.literal_eval(obj):
    l.append(i['name'])
  return l

movies['genres']=movies['genres'].apply(convert)

movies['keywords']=movies['keywords'].apply(convert)

def convert(obj):
  l=[]
  counter=0
  for i in ast.literal_eval(obj):
    if counter!=3:
      l.append(i['name'])
    else:
      break
    counter+=1
  return l

movies['cast']=movies['cast'].apply(convert)

def get_director(obj):
  l=[]
  for i in ast.literal_eval(obj):
    if i['job']=='Director':
      l.append(i['name'])
      break
  return l

movies['crew']=movies['crew'].apply(get_director)

movies.sample(5)

movies['overview']=movies['overview'].apply(lambda x:x.split())

movies.head()

movies['genres']=movies['genres'].apply(lambda x:[i.replace(" ","")for i in x])
movies['keywords']=movies['keywords'].apply(lambda x:[i.replace(" ","")for i in x])
movies['cast']=movies['cast'].apply(lambda x:[i.replace(" ","")for i in x])
movies['crew']=movies['crew'].apply(lambda x:[i.replace(" ","")for i in x])

movies.head()

movies['tag']=movies['overview']+movies['genres']+movies['keywords']+movies['cast']+movies['crew']

new_df=movies[['movie_id','title','tag']]

new_df['tag']=new_df['tag'].apply(lambda x:" ".join(x))
new_df.head()

new_df['tag']=new_df['tag'].apply(lambda x:x.lower())

new_df.head()

new_df['tag'][0]

new_df['tag'][1]

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=5000,stop_words='english')

vectors=cv.fit_transform(new_df['tag']).toarray()

vectors

vectors.shape

cv.get_feature_names_out()

import nltk

from nltk.stem.porter import PorterStemmer
ps=PorterStemmer()

def stem(text):
  y = []
  for i in text.split():
    y.append(ps.stem(i))
  return " ".join(y)

new_df['tag']=new_df['tag'].apply(stem)

vectors[0]

from sklearn.metrics.pairwise import cosine_similarity

similarity=cosine_similarity(vectors)

similarity[0]

def recommend(movie):
  movie_index=new_df[new_df['title']==movie].index[0]
  distances=similarity[movie_index]
  movies_list=sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]
  for i in movies_list:
    print(new_df.iloc[i[0]].title)

recommend('Batman Begins')

new_df.iloc[539].title

import pickle

pickle.dump(new_df.to_dict(),open('movies_dict.pkl','wb'))

!ls

new_df['title'].values

new_df.to_dict()

import pickle

with open('movies_dict.pkl', 'rb') as f:
    movies_dict = pickle.load(f)
print(movies_dict)

import pickle
import pandas as pd

# Load the pickle file
with open('movies_dict.pkl', 'rb') as f:
    movies_dict = pickle.load(f)

# Validate the dictionary structure
if isinstance(movies_dict, dict):
    try:
        movies = pd.DataFrame(movies_dict)
        print(movies.head())
    except ValueError:
        print("The dictionary structure is invalid for DataFrame construction.")
else:
    print("The pickle file does not contain a dictionary.")

pickle.dump(similarity,open('similarity.pkl','wb'))

